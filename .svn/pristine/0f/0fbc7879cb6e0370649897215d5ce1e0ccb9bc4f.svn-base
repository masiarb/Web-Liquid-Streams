//import WLS
var k = require('./../k_globals/koala.js');

//create the Worker callback function
var i = 0;
var interval = setInterval(function(){
	//GET - SET
	
	/*var toStore = {
		"index" : i
	};
	if(i%2 == 0){
		set("provaObject", toStore, function(i, res){
			console.log("set " + JSON.stringify(i) + " in the database, that returns: " + res);
		});
	}
	else {
		k.stateful.get("provaObject", function(res){
			console.log("got result from db: " + JSON.stringify(res));
		});
	}
	i++;*/
	
	
	//INCR
	k.stateful.incr("prova", function(res){
		console.log(res);
	});
}, 1000);

//closure
var set = function(key, value, cb){
	k.stateful.set(key, value, function(res) { cb(value, res) });
}

/*
	What has been tested as DB Functionalities using "redis" and not "thunk-redis":
	
	k.stateful.set(key, value, cb(res){}) --> storest a value on a key, the callback res should be "OK" if everything was ok
	
	k.stateful.get(key, cb(value){}) --> retrieves the value stored at the given key, the callback has as argument the value
	
	

*/